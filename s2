api/ledger.js
// api/ledger.js
// 사용법: GET /api/ledger?store=홈플러스 센텀시티점
// 헤더: x-api-key: <PRIVATE_TOKEN>

const axios = require("axios");

const KAKAO_REST = process.env.KAKAO_REST;   // 카카오 REST 키
const MOLIT_KEY  = process.env.MOLIT_KEY;    // 국토부 일반인증키
const PRIVATE_TOKEN = process.env.PRIVATE_TOKEN; // 형님이 정한 비밀 토큰

// 숫자를 4자리로 맞추기
const z4 = (v) => (String(v ?? "").trim() === "" ? "0000" : String(v).padStart(4, "0"));

async function kakaoPlace(keyword) {
  const url = "https://dapi.kakao.com/v2/local/search/keyword.json";
  const { data } = await axios.get(url, {
    headers: { Authorization: `KakaoAK ${KAKAO_REST}` },
    params: { query: keyword, size: 1 },
  });
  if (!data.documents?.length) throw new Error("카카오 장소검색 결과 없음");
  return data.documents[0];
}

async function kakaoAddressParse(addressText) {
  const url = "https://dapi.kakao.com/v2/local/search/address.json";
  const { data } = await axios.get(url, {
    headers: { Authorization: `KakaoAK ${KAKAO_REST}` },
    params: { query: addressText, size: 1 },
  });
  const a = data.documents?.[0]?.address;
  if (!a) throw new Error("카카오 주소검색 실패");
  return {
    sigunguCd: a.b_code.slice(0, 5),
    bjdongCd: a.b_code.slice(5, 10),
    bun: z4(a.main_address_no),
    ji: z4(a.sub_address_no || 0),
    platGbCd: a.mountain_yn === "Y" ? "1" : "0",
  };
}

async function molitGetBrTitle(params) {
  const base = "http://apis.data.go.kr/1613000/BldRgstHubService/getBrTitleInfo";
  const { data } = await axios.get(base, {
    params: { serviceKey: MOLIT_KEY, _type: "json", numOfRows: 10, pageNo: 1, ...params },
  });
  return data?.response?.body?.items?.item || [];
}

module.exports = async (req, res) => {
  try {
    // 간단 인증
    if (PRIVATE_TOKEN && req.headers["x-api-key"] !== PRIVATE_TOKEN) {
      return res.status(401).json({ ok: false, error: "unauthorized" });
    }

    const store = req.query.store;
    if (!store) {
      return res.status(400).json({ ok: false, error: "store_query_required" });
    }

    // 1) 점포명으로 카카오 장소검색 → 주소 추출
    const place = await kakaoPlace(store);
    const addressText = place.address_name || place.road_address_name;
    const params = await kakaoAddressParse(addressText);

    // 2) 국토부 대장 조회
    const ledger = await molitGetBrTitle(params);

    res.status(200).json({
      ok: true,
      input: store,
      candidate: place,
      query_params: params,
      ledger_items: ledger,
    });
  } catch (e) {
    res.status(500).json({ ok: false, error: e.message || "internal_error" });
  }
};
